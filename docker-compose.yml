services:
  # Backend Laravel
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
      - backend_storage:/var/www/html/storage
      - backend_cache:/var/www/html/bootstrap/cache
    environment:
      - APP_NAME="ERP Estoque"
      - APP_ENV=local
      - APP_DEBUG=true
      - APP_URL=http://localhost:8000
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=fone_test
      - DB_USERNAME=root
      - DB_PASSWORD=root123
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - erp-network
    command: php artisan serve --host=0.0.0.0 --port=8000

  # Frontend Vue.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: erp-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
      - mysql
    networks:
      - erp-network
    environment:
      - VITE_API_URL=http://localhost:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Banco de dados MySQL
  mysql:
    image: mysql:8.0
    container_name: erp-mysql
    restart: unless-stopped
    ports:
      - "4306:3306"
    environment:
      MYSQL_DATABASE: fone_test
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: erp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - erp-network
    profiles:
      - redis  # Só executa se especificado: docker-compose --profile redis up

  # Nginx Proxy (opcional, para produção)
  nginx-proxy:
    image: nginx:alpine
    container_name: erp-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - erp-network
    profiles:
      - proxy  # Só executa se especificado: docker-compose --profile proxy up

volumes:
  backend_storage:
    driver: local
  backend_cache:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  erp-network:
    driver: bridge
